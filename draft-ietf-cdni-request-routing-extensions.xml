<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<rfc category="std" docName="draft-ietf-cdni-request-routing-extensions-08" ipr="trust200902">
  <front>
    <title abbrev="CDNI Request Routing Extensions">CDNI Request Routing Extensions</title>

    <author fullname="Ori Finkelman" initials="O." surname="Finkelman">
      <organization>Qwilt</organization>

      <address>
        <postal>
          <street>6, Ha'harash</street>

          <city>Hod HaSharon</city>

          <region></region>

          <code>4524079</code>

          <country>Israel</country>
        </postal>

       <phone></phone>
       
        <email>ori.finkelman.ietf@gmail.com</email>
      </address>
    </author>

    <author fullname="Sanjay Mishra" initials="S." surname="Mishra">
      <organization>Verizon</organization>

      <address>
        <postal>
          <street>13100 Columbia Pike</street>

          <city>Silver Spring</city>

          <region>MD</region>

          <code>20904</code>

          <country>USA</country>
        </postal>

        <phone></phone>

        <email>sanjay.mishra@verizon.com</email>
      </address>
    </author>

    <author fullname="Nir B. Sopher" initials="N." surname="Sopher">
        <organization>Qwilt</organization>

        <address>
            <postal>
                <street>6, Ha'harash</street>

                <city>Hod HaSharon</city>

                <region></region>

                <code>4524079</code>

                <country>Israel</country>
            </postal>

            <email>nir@apache.org</email>
        </address>
    </author>

    <date/>

    <abstract>
      <t>Open Caching architecture is a use case of Content Delivery Networks Interconnection (CDNI) in which the 
         commercial Content Delivery Network (CDN) is the upstream CDN (uCDN) and the ISP caching layer serves as the
         downstream CDN (dCDN). The extensions specified in this document to the CDNI Metadata Interface (MI) and
         the Footprint and Capabilities Interface (FCI) are derived from requirements raised by Open Caching but
         are also applicable to CDNI use cases in general.</t>
    </abstract>

  </front>

  <middle>
    <section title="Introduction">
      <t>The <xref target="SVA">Streaming Video Alliance</xref> is a global association that works to solve 
         streaming video challenges in an effort to improve end-user experience and adoption.
         The <xref target="OCWG">Open Caching Working Group</xref> of the <xref target="SVA">Streaming Video Alliance</xref> 
         is focused on the delegation of video delivery requests from commercial CDNs to a caching layer at the Internet 
         Service Provider's (ISP) network. Open Caching architecture is a specific use case of CDNI where the commercial CDN 
         is the upstream CDN (uCDN) and the ISP caching layer is the downstream CDN (dCDN). 
         The <xref target="OC-RR">Open Caching Request Routing Specification</xref> defines the Request Routing process 
         and the interfaces that are required for its provisioning. This document defines and registers CDNI metadata 
         object <xref target="RFC8006"/> and CDNI Footprint and Capabilities object <xref target="RFC8008"/> that are 
         required for Open Caching Request Routing. For consistency with other CDNI documents this document follows the 
         CDNI convention of uCDN (upstream CDN) and dCDN (downstream CDN) to represent the commercial CDN and ISP caching
         layer respectively.</t>
      
      <t>This document also registers CDNI Payload Types <xref target="RFC7736"/> and a CDNI Metadata Footprint Type
          (section 7.2 of <xref target="RFC8006"/>) for the defined objects:
          <list style="symbols">
            <t>Redirect Target Capability (for dCDN advertising redirect target address)</t>
            <t>Fallback Target Metadata (for uCDN configuring fallback target address)</t>
            <t>IPv4v6CIDR Footprint Type (for dCDN advertising a footprint that consists of both
                IPv4 and IPv6 client addresses)</t>
          </list>
      </t>
        
      <section anchor="terminology" title="Terminology">
        <t>The following terms are used throughout this document:
          <list style="symbols">
            <t>FQDN - Fully Qualified Domain Name</t>
            <t>CDN - Content Delivery Network</t>
          </list>
        </t>
        <t>Additionally, this document reuses the terminology defined in <xref target="RFC6707"/>,
           <xref target="RFC7336"/>, <xref target="RFC8006"/>, <xref target="RFC8007"/>, and <xref target="RFC8008"/>. 
           Specifically, we use the following CDNI acronyms:
          <list style="symbols">
            <t>FCI - Footprint and Capability Interface (see <xref target="RFC8008"/>)</t>            
            <t>MI - Metadata Interface (see <xref target="RFC8006"/>)</t> 
            <t>uCDN, dCDN - Upstream CDN and Downstream CDN respectively (see <xref target="RFC7336"/>)</t> 
            <t>RT - Redirection Target. Endpoint for redirection from uCDN to dCDN.</t> 
            <t>RR - Request Router. An element responsible for routing user requests, typically using HTTP redirect
               or DNS CNAME, depending on the use case.</t>    
          </list>
        </t>
      </section>

      <section title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", 
         "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this 
         document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
         when, and only when, they appear in all capitals, as shown here.</t>
      </section>

    </section>

    <section anchor="redirect-target-capability" title="Redirect Target Capability">
      <t>Iterative request redirection is defined in Section 1.1 of <xref target="RFC7336"/> and elaborated
         by examples in Sections 3.2 and 3.4 of <xref target="RFC7336"/>.  A Redirection Target (RT) is defined in 
         Section 2 of <xref target="RFC7975"/> for Recursive Request Redirection as: 
      </t>
      <t><list style="empty">
        <t>
           "The endpoint to which the User Agent is redirected.  In CDNI, a RT may point to a number of different 
           components, some examples include a surrogate in the same CDN as the request router, a request router in 
           a dCDN, or a surrogate in a dCDN". 
        </t>
      </list></t>
      <t>
         In this document we adopt the same definition of the RT for the Iterative Request Redirect use case.
         This use case requires the provisioning of the RT address to be used by the uCDN in order to redirect 
         to the dCDN. RT addresses can vary between different footprints, for example, between different regions, 
         and they may also change over time, for example as a result of network problems. Given this variable 
         and dynamic nature of the redirect target address, it may not be suitable to advertise it during bootstrap. 
         A more dynamic and footprint oriented interface is required. Section 4.3 of <xref target="RFC7336"/> suggests 
         that it could be one of the roles of the FCI <xref target="RFC8008"/>. Following this suggestion, we have 
         therefore, chosen to use the CDNI Footprint and Capabilities interface for redirect target address advertisement.
      </t>
         
      <t>Use cases<list style="symbols">
         <t>Footprint: The dCDN may want to have a different target per footprint. 
            Note that a dCDN may spread across multiple geographies. This makes it 
            easier to route client requests to a nearby request router. Though this can be achieved 
            using a single canonical name and "Geo DNS", such that in different geographies the same 
            hostname is resolved to different IP address, that approach has limitations; 
            for example a client may be using a third party DNS resolver, making it 
            impossible for the redirector to detect where the client is located, or Geo DNS 
            granularity may be too rough for the requirement of the application.</t>

         <t>Scaling: The dCDN may choose to scale its request routing service by deploying more request routers 
            in new locations and advertise them via an updatable interface like the FCI.</t>

      </list></t>
      <t>The Redirect Target capability object is used to indicate the target address the uCDN should use in order
         to redirect a client to the dCDN. A target may be attached to a specific uCDN host, a list of uCDN hosts, 
         or used globally for all the hosts of the uCDN. 
      </t>
      <t>
         When a dCDN is attaching the redirect target to a specific uCDN host or a list of uCDN hosts, the dCDN MUST 
         advertise the hosts within the Redirect Target capability object as "redirecting-hosts". In this case, the 
         uCDN can redirect to that dCDN address, only if the User Agent request was to one of these uCDN hosts.
      </t>

      <t>
         If the redirect target capability object does not contain a target or the target is empty, the uCDN MUST interpret it as
         "no target available for these uCDN hosts for the specified footprint". In case such a target was already advertised in a 
         previous FCI object, the uCDN MUST interpret it as an update that deletes the previous redirect target.
       </t> 

      <section title="DNS Redirect Target"> 
        <t>
            A redirect target for DNS redirection is a FQDN used as an alias in a CNAME record response (see <xref target="RFC1034"/>) 
            of the uCDN DNS router. Note that DNS routers make routing decisions based on either the DNS resolver's IP 
            address or the client IP subnet when EDNS0 client-subnet (ECS) is used (see <xref target="RFC7871"/>). 
            The dCDN may choose to advertise redirect targets and footprints to cover both cases, such that the uCDN resolution
            would route the DNS query to a different dCDN CNAMEs according client subnet or dCDN resolver IP address.
            This method further allows the dCDN DNS to optimize the resolution by localizing the target CNAMEs.
            A uCDN implementation SHOULD prefer routing based on client IP subnet when ECS option is present.
            A dCDN implementation using the ECS option MUST be aware of the privacy drawbacks listed in Section 2 of 
            <xref target="RFC7871"/> and SHOULD follow the guidelines provided in Section 11.1 of <xref target="RFC7871"/>.   
        </t>
      </section>
      <section title="HTTP Redirect Target"> 
        <t>
            A redirect target for HTTP redirection is the URI to be used as the value for the Location header of a HTTP redirect 
            3xx response, typically a 302 (Found) (see Section 7.1.2 of <xref target="RFC7231"/> and section 6.4 of 
            <xref target="RFC7231"/>). 
        </t>
      </section>


      <section anchor="redirect-target-capability-properties" title="Properties of Redirect Target Capability Object">
         <t>The Redirect Target capability object consists of the following properties:</t> 
         <t><list style="empty">
            <t>Property: redirecting-hosts<list style="empty"> 

               <t>Description: One or more uCDN hosts to which this redirect target is attached. A redirecting host SHOULD be a 
                  host that was published in a HostMatch object by the uCDN as defined in Section 4.1.2 of <xref target="RFC8006"/>.</t>

               <t>Type: A list of Endpoint objects (see Section 4.3.3 of <xref target="RFC8006"/>)</t>

               <t>Mandatory-to-Specify: No. If not present, or empty, the redirect target applies to all hosts of the redirecting uCDN.</t>
            </list></t>
            <t>Property: dns-target<list style="empty">

               <t>Description: Target CNAME record for DNS redirection.</t>

               <t>Type: DnsTarget object (see <xref target="dns-target"/>)</t>

               <t>Mandatory-to-Specify: No. If the dns-target is not present or empty the uCDN MUST interpret it as "no dns-target available".</t>
            </list></t>
            <t>Property: http-target<list style="empty">

               <t>Description: Target URI for a HTTP redirect.</t>

               <t>Type: HttpTarget object (see <xref target="http-target"/>)</t>

               <t>Mandatory-to-Specify: No. If the http-target is not present or empty the uCDN MUST interpret it as "no http-target available".</t>
            </list></t>

         </list></t>
 
          
         <t>The following is an example of a Redirect Target capability object serialization that advertises a dCDN target address 
            that is attached to a specific list of uCDN "redirecting-hosts". A uCDN host that is included in that list can redirect 
            to the advertised dCDN redirect target. The capabilities object is serialized as a JSON object as defined in Section 5.1 
            of <xref target="RFC8008"/>
         </t>

         <figure>
           <artwork><![CDATA[
{
  "capabilities": [
    {
      "capability-type": "FCI.RedirectTarget",
      "capability-value": {
          "redirecting-hosts": [
             "a.service123.ucdn.example.com", 
             "b.service123.ucdn.example.com"
          ],
          "dns-target": {
             "host": "service123.ucdn.dcdn.example.com"
          },
          "http-target": {
              "host": "us-east1.dcdn.example.com",
              "path-prefix": "/cache/1/",
              "include-redirecting-host": true          
          }
      },
      "footprints": [
          <Footprint objects>
      ]
    }
  ]
}
         ]]></artwork>
         </figure>
      </section> 
      <section anchor="dns-target" title="DnsTarget Object">
         <t>The DnsTarget object gives the target address for the DNS response to delegate from the uCDN to the dCDN.</t>
                           
         <t><list style="empty">
            <t>Property: host<list style="empty">

               <t>Description: The host property is a hostname or an IP address, without a port number.</t>

               <t>Type: Endpoint object as defined in Section 4.3.3 of <xref target="RFC8006"/> 
                   with the limitation that it SHOULD NOT include a port number and, in case a port number is present,
                   the uCDN MUST ignore it.</t>

               <t>Mandatory-to-Specify: Yes.</t>
            </list></t>
         </list></t>

         <section title="DNS Target Example">
            <t>The following is an example of DnsTarget object:</t>
            <figure>
                <artwork><![CDATA[
 {
    "host": "service123.ucdn.dcdn.example.com"
 }
            ]]></artwork>
            </figure>
            <t>The following is an example of a DNS query for uCDN address "a.service123.ucdn.example.com" and the corresponding 
                CNAME redirection response:</t>
            <figure>
                <artwork><![CDATA[
 Query:
 a.service123.ucdn.example.com: 
 type A, class IN 
 
 Response:
 NAME: a.service123.ucdn.example.com, TYPE: CNAME, CLASS: IN, 
 TTL: 120, RDATA: service123.ucdn.dcdn.example.com
            ]]></artwork>
            </figure> 
         </section> 
      </section>

      <section anchor="http-target" title="HttpTarget Object">
         <t>The HttpTarget object gives the necessary information to construct the target Location URI for HTTP redirection.</t>
                        
         <t><list style="empty">
            <t>Property: host<list style="empty">

               <t>Description: Hostname or IP address and an optional port, i.e., the host and port of the authority component 
                  of the URI as described in Section 3.2 of <xref target="RFC3986"/>.</t>

               <t>Type: Endpoint object as defined in Section 4.3.3 of <xref target="RFC8006"/>.</t>

               <t>Mandatory-to-Specify: Yes.</t>
            </list></t>
            <t>Property: scheme<list style="empty">

               <t>Description: A URI scheme to be used in the redirect response location construction. 
                  When present, the uCDN MUST use the provided scheme in for HTTP redirection to the dCDN.</t>

               <t>Type: A URI scheme as defined in Section 3.1 of <xref target="RFC3986"/> represented as a JSON string. The scheme MUST be 
                  either "http" or "https".</t>

               <t>Mandatory-to-Specify: No. If this property is absent or empty the uCDN request router MUST use the same scheme as was 
                  used in the original request before redirection.</t>
            </list></t>
            <t>Property: path-prefix<list style="empty">

               <t>Description: A path prefix for the HTTP redirect Location header. The original path is appended after this prefix.</t>

               <t>Type: A prefix of a path-absolute as defined in Section 3.3 of <xref target="RFC3986"/>. 
                  The prefix MUST end with a trailing slash, to indicate the end of the last path segment in the prefix.</t>

               <t>Mandatory-to-Specify: No. If this property is absent or empty, the uCDN MUST NOT prepend a path prefix to 
                  the original content path, i.e., the original path MUST appear in the location URI right after the authority component.</t>
            </list></t>

            <t>Property: include-redirecting-host<list style="empty">

               <t>Description: A flag indicating whether or not to include the redirecting host as the first path segment after the path-prefix.
                  If set to true and a "path-prefix" is used, the uCDN redirecting host MUST be added as a separate path segment after 
                  the path-prefix and before the original URL path. If set to true and there is no path-prefix, the uCDN redirecting 
                  host MUST be prepended as the first path segment in the redirect URL.</t>

               <t>Type: Boolean.</t>

               <t>Mandatory-to-Specify: No. Default value is False.</t>
            </list></t>         
         </list></t>

         <section title="HTTP Target Example">
            <t>Example of HttpTarget object with a "scheme", a "path-prefix", and "include-redirecting-host" properties:</t>

            <figure>
                <artwork><![CDATA[
{
   "host": "us-east1.dcdn.example.com",
   "scheme": "https",
   "path-prefix": "/cache/1/",
   "include-redirecting-host": true
}
            ]]></artwork>
            </figure>
                <t>Example of a HTTP request for content at uCDN host "a.service123.ucdn.example.com" and the corresponding HTTP response with 
                   a Location header, used for redirecting the client to the dCDN, constructed according to the HttpTarget object from the above example:</t>
            <figure>
                <artwork><![CDATA[
 Request:
 GET /vod/1/movie.mp4 HTTP/1.1
 Host: a.service123.ucdn.example.com
 
 Response:
 HTTP/1.1 302 Found
 Location: https://us-east1.dcdn.example.com/cache/1/
 a.service123.ucdn.example.com/vod/1/movie.mp4
            ]]></artwork>
            </figure>
         </section>  
      </section>     

      <section anchor="redirect-target-usage-example" title="Usage Example">
         <t>
           Before requests can be routed from the uCDN to the dCDN the CDNs must exchange service configurations
           between them. Using the MI, the uCDN advertises out-of-band its hosts to the dCDN, each host is designated 
           by a hostname and has its own specific metadata (see Section 4.1.2 of <xref target="RFC8006"/>.
           The dCDN, using the FCI, advertises, also out-of-band, the redirect target address object defined in 
           <xref target="redirect-target-capability-properties"/> for the relevant uCDN hosts.
           The following is a generalized example of the message flow between an upstream CDN and a downstream dCDN. 
           For simplicity, we focus on the sequence of messages between the uCDN and dCDN and not on how they are passed.
         </t>

         <figure>
           <artwork><![CDATA[
  dCDN                                                    uCDN
    +                                                       +
    |                                                       |
(1) | MI:  host: s123.ucdn.example.com                      |
    |      host-metadata: < metadata >                      |
    <-------------------------------------------------------+
    |                                                       |
(2) | FCI:  capability-type: FCI.RedirectTarget             |
    |       redirecting-hosts: s123.ucdn.example.com        |
    |       target host: us-east1.dcdn.example.com          |
    +------------------------------------------------------->
    |                                                       |
    |                                                       |
    +                                                       +

    Figure 1: Redirect target address advertisement
         ]]></artwork>
         </figure>
         <t><list style="numbers">
           <t>
             The uCDN advertises a host (s123.ucdn.example.com) with the host metadata. 
           </t>
           <t>
             The dCDN advertises its FCI objects to the uCDN including a FCI.RedirectTarget object that contains 
             the redirect target address (us-east1.dcdn.example.com) specified for that uCDN host.  
           </t>
         </list></t>

         <t>
           Once the redirect target has been set, the uCDN can start redirecting user requests to the dCDN. The following is 
           a generic sequence of redirection using the host and redirect target that were advertised in Figure 1 above.
         </t>

         <figure>
           <artwork><![CDATA[
End User                  dCDN                   uCDN RR
    +                       +                       +
    |                       |                       |
(1) | Request sent s123.ucdn.example.com            |
    +-----------------------+----------------------->
    |                       |                       |
(2) | Redirect to us-east1.dcdn.example.com         |
    <-----------------------+-----------------------+
    |                       |                       |
(3) | Request us-east1.dcdn.example.com             |
    +----------------------->                       |
    |                       |                       |
(4) | Response              |                       |
    <-----------------------+                       |
    |                       |                       |
    +                       +                       +

    Figure 2: Generic requests redirection sequence
         ]]></artwork>
         </figure>
         <t><list style="numbers">
           <t>
             The End User sends a request (DNS or HTTP) to the uCDN Request Router (RR). 
           </t>
           <t>
             Using the previously advertised Redirect Target, the uCDN redirects the request to the 
             dCDN. 
           </t>
           <t>
             The End User sends a request to the dCDN. 
           </t>
           <t>
             The dCDN either sends a response or reroutes it, for example, to a dCDN surrogate. 
           </t>
         </list></t>
      </section>              
    </section>

    <section anchor="fallback-target-metadata" title="Fallback Target Address Metadata">
      <t>Open Caching requires that the uCDN provides a fallback target server to the 
         dCDN, to be used in cases where the dCDN cannot properly handle the request. 
         To avoid redirect loops, the fallback target server's address at the uCDN MUST be 
         different from the original uCDN address from which the client was redirected 
         to the dCDN. The uCDN MUST avoid further redirection when receiving the client request at 
         the fallback target. The fallback target is defined as a generic metadata object 
         (see Section 3.2 of <xref target="RFC8006"/>)</t>
         
      <t>Use cases<list style="symbols">
         <t>Failover: A dCDN request router receives a request but has no caches 
            to which it can route the request. This can happen in the case of 
            failures or temporary network overload.</t>
         
         <t>No coverage: A dCDN request router receives a request from a client located
            in an area inside the footprint but not covered by the dCDN caches or outside the dCDN 
            footprint coverage. In such cases, the router may choose to redirect the request back 
            to the uCDN fallback address.</t>

         <t>Error: A cache may receive a request that it cannot properly serve, for 
            example, some of the metadata objects for that service were not properly 
            acquired. In this case, the cache's "default action" may be to "redirect back to uCDN".</t>
      </list></t>

      <t>The Fallback target metadata object is used to indicate the target address the dCDN should redirect 
         a client to when falling back to the uCDN. Fallback target address is represented as an endpoint 
         object as defined in Section 4.3.3 of <xref target="RFC8006"/>.</t>
         
      <t>In DNS redirection a CNAME record is used as the fallback target address.</t> 
      <t>In HTTP redirection a hostname is used as the fallback target address.</t>

      <t>When using HTTP redirect to route a client request back to the uCDN, it is the dCDN's responsibility
         to use the original URL path as the client would have used for the original uCDN request, stripping, 
         if needed, the dCDN path-prefix and/or the uCDN hostname from the redirect URL that may have been used to 
         request the content from the dCDN.</t>

      <section anchor="fallback-target-metadata-properties" title="Properties of Fallback Target Address Metadata Object">
         <t>The MI.FallbackTarget Metadata object consists of the following single property:</t>
         <t><list style="empty">
            <t>Property: host<list style="empty">
         
               <t>Description: Target address to which the dCDN can redirect the client.</t>

               <t>Type: Endpoint object as defined in Section 4.3.3 of <xref target="RFC8006"/> 
                  with the limitation that in case of DNS delegation it SHOULD NOT include a port number and,
                  in case a port number is present, the dCDN MUST ignore it.</t>

               <t>Mandatory-to-Specify: Yes.</t>
            </list></t>
            <t>Property: scheme<list style="empty">

               <t>Description: A URI scheme to be used in the redirect response location construction. 
                  When present, the dCDN MUST use this scheme in case of HTTP redirection to the 
                  uCDN fallback address.</t>

               <t>Type: A URI scheme as defined in Section 3.1 of <xref target="RFC3986"/> represented as a JSON string. The scheme MUST be 
                  either "http" or "https".</t>

               <t>Mandatory-to-Specify: No. In case of HTTP redirection to fallback, if this property is absent or empty,
                  the dCDN redirecting entity MUST use the same scheme as in the request received by the dCDN.</t>
            </list></t>            
         </list></t>    

         <t>Example of a MI.FallbackTarget Metadata object that designates the host address
            the dCDN should use as fallback address to redirect back to the uCDN.</t>

         <figure>
            <artwork><![CDATA[
{
    "generic-metadata-type": "MI.FallbackTarget",
    "generic-metadata-value":
    {
        "host": "fallback-a.service123.ucdn.example",
        "scheme": "https"
    }
}
         ]]></artwork>
         </figure>
      </section> 

      <section anchor="fallback-address-usage-example" title="Usage Example">
         <t>
           The uCDN advertises out-of-band the fallback target address to the dCDN, so that the dCDN 
           may redirect a request back to the uCDN in case the dCDN cannot serve it.
           Using the MI the uCDN advertises its hosts to the dCDN, along with their specific host metadata 
           (see Section 4.1.2 of <xref target="RFC8006"/>. The Fallback Target generic metadata object is 
           encapsulated within the "host-metadata" property of each host. The following is an example of 
           a message flow between an upstream CDN and a downstream dCDN.  For simplicity, we focus on the 
           sequence of messages between the uCDN and dCDN, not on how they are passed.
         </t>

         <figure>
           <artwork><![CDATA[
  dCDN                                                    uCDN
    +                                                       +
    |                                                       |
(1) | MI:  host: s123.ucdn.example.com                      |
    |      host-metadata:                                   |
    |          < metadata objects >                         |
    |          < MI.FallbackTarget                          |
    |            host: fallback-a.service123.ucdn.example > |
    |          < metadata objects >                         |
    <-------------------------------------------------------+
    |                                                       |
(2) | FCI:  capability-type: FCI.RedirectTarget             |
    |       redirecting-hosts: s123.ucdn.example.com        |
    |       target host: us-east1.dcdn.example.com          |
    +------------------------------------------------------->
    |                                                       |
    |                                                       |
    +                                                       +

    Figure 3: Advertisement of host metadata with Fallback Target 
         ]]></artwork>
         </figure>
         <t><list style="numbers">
           <t>
             The uCDN advertises a host (s123.ucdn.example.com) with the host metadata. The host-metadata property 
             contains a MI.FallbackTarget object.
           </t>
           <t>
             The dCDN advertises its FCI objects to the uCDN including a FCI.RedirectTarget object that contains 
             the redirect target address (us-east1.dcdn.example.com) specified for that uCDN host.  
          </t>
         </list></t>

         <t>
           The following is a generic sequence of redirection using the configurations that were advertised in 
           Figure 3 above. In this case the dCDN redirects back to the uCDN fallback target address.
         </t>

         <figure>
           <artwork><![CDATA[
End User              dCDN            uCDN fallback          uCDN RR
    +                   +                   +                   +
    |                   |                   |                   |
(1) | Request sent s123.ucdn.example.com    |                   |
    +-------------------+-------------------+------------------->
    |                   |                   |                   |
(2) | Redirect to us-east1.dcdn.example.com |                   |
    <-------------------+-------------------+-------------------+
    |                   |                   |                   |
(3) | Request us-east1.dcdn.example.com     |                   |
    +------------------->                   |                   |
    |                   |                   |                   |
(4) | Redirect back to fallback-a.service123.ucdn.example       |
    <-------------------+                   |                   |
    |                   |                   |                   |
(5) | Request fallback-a.service123.ucdn.example                |
    +--------------------------------------->                   |
    |                   |                   |                   |
(6) | Response          |                   |                   | 
    <-------------------+-------------------+                   |
    |                   |                   |                   |
    +                   +                   +                   +

    Figure 4: Redirection to Fallback Target
         ]]></artwork>
         </figure>
         <t><list style="numbers">
           <t>
             The End User sends a request (DNS or HTTP) to the uCDN Request Router (RR). 
           </t>
           <t>
             Using the previously advertised Redirect Target, the uCDN redirects the request to the 
             dCDN. 
           </t>
           <t>
             The End User sends a request to the dCDN. 
           </t>
           <t>
             The dCDN cannot handled the request and, therefore, redirects it back to the uCDN fallback
             target address.
           </t>
           <t>
             The End User sends the request to the uCDN fallback target address.
           </t>
           <t>
             The uCDN either sends a response or reroutes it, for example, to a uCDN surrogate. 
           </t>
         </list></t>
      </section>

      <section title="uCDN addressing considerations">
        <t>When advertising fallback addresses to the dCDN the uCDN SHOULD consider the failure use cases that may 
           lead the dCDN to route requests to uCDN fallback. In extreme dCDN network failures or under denial-of-service 
           (DoS) attacks, requests coming from  a large segment or multiple segments of the dCDN may be routed back to the uCDN. 
           The uCDN SHOULD therefore design its fallback addressing scheme and its available resources accordingly. 
           A favorable approach would be for the uCDN to use different fallback target address for each uCDN host,
           enabling it to load balance the requests using the same methods as it would for its original hosts.
           See Sections 4.1.2 and 4.1.3 of <xref target="RFC8006"/> for a detailed description of how to use 
           GenericMetadata objects within the HostMatch object advertised in the HostIndex of the uCDN.
        </t> 
      </section>

    </section>


    <section anchor="cdni-metadata-ipv4v6cidr-footprint-type" title="CDNI Metadata IPv4v6CIDR Footprint Type">
      <t> As described in section 5 of <xref target="RFC8008"/>, the FCI Capability Advertisement Object
          includes an array of CDNI Footprint Objects. Appendix B of <xref target="RFC8008"/> specifies that the
          semantics of Footprint Objects array is of a multiple, additive, footprint constraints. 
          Meaning, the advertisement of different footprint types narrows
          the dCDN's candidacy cumulatively. 
      </t>

      <t>Sections 4.3.5 and 4.3.6 of <xref target="RFC8006"/> specify the "IPv4CIDR" and "IPv6CIDR"
          footprint types (respectively), for listing IP addresses blocks. Using Footprint Objects of these
          types, one can define a FCI Capability Advertisement Object footprint constraints that match IPv4 
          or IPv6 clients. However, the described "narrowing" semantic of the Footprint Objects array prevents
          the usage of these objects together in order to create a footprint constraint that matches IPv4 
          clients together with IPv6 clients. 
       </t>
       <t>Below is an example for an attempt creating an object matching 
          IPv4 clients of subnet "192.0.2.0/24", as well as IPv6 clients of subnet "2001:db8::/32". 
          Such definition results with an empty list of clients, as the constraints are additives and 
          a client address cannot be both IPv4 and IPv6.
      </t>

        <figure>
            <artwork><![CDATA[
{
  "capabilities": [
    {
      "capability-type": <CDNI capability object type>,
      "capability-value": <CDNI capability object>,
      },
      "footprints": [
          {
              "footprint-type": "ipv4cidr",
              "footprint-value": ["192.0.2.0/24"]
          },
          {
              "footprint-type": "ipv6cidr",
              "footprint-value": ["2001:db8::/32"]
          }
      ]
    }
  ]
}
]]>
            </artwork>
        </figure>


      <t>To overcome the described limitation and allow a list of footprint constraints that
          matches both IPv4 and IPv6 client addresses, we introduce below the "IPv4v6CIDR" simple data type as well as
          a derived footprint type.
      </t>

      <section anchor="cdni-metadata-ipv4v6cidr-data-type" title="CDNI Metadata IPv4v6CIDR Data Type">
        <t>The "IPv4v6CIDR" data type specified in <xref target="cdni-metadata-ipv4v6cidr-data-type-description"/>, 
            can be either IPv4 or IPv6 address blocks. The data type is added to the list of data types
            described in section 4.3 of <xref target="RFC8006"/> that are used as properties of CDNI Metadata objects.
        </t>

        <section anchor="cdni-metadata-ipv4v6cidr-data-type-description" title="CDNI Metadata IPv4v6CIDR Data Type Description">
          <t>Either a IPv4CIDR property or IPv6CIDR property, as described in sections 4.3.5 and 4.3.6 of
             <xref target="RFC8006"/> respectively.
          </t>
          <t><list style="empty">
            <t>Type: String</t>
            <t>Example IPv4v6CIDRs:</t>
            <t>"192.0.2.0/24"</t>
            <t>"2001:db8::/32"</t>
          </list></t>
        </section>
      </section>

      <section anchor="cdni-metadata-ipv4v6cidr-footprint-type-description" title="CDNI Metadata IPv4v6CIDR Footprint Type Description">
        <t>The "IPv4v6CIDR" simple data type specified in <xref target="cdni-metadata-ipv4v6cidr-data-type"/>, is added
           to the data types listed as footprint types in section 4.2.2.2 of <xref target="RFC8006"/>.
         </t>
         <t>Below is an adjustment for the example in <xref target="cdni-metadata-ipv4v6cidr-data-type"/>, 
            now embedding a footprint object of type "IPv4v6CIDR".
        </t>

        <figure>
          <artwork><![CDATA[
{
  "capabilities": [
    {
      "capability-type": <CDNI capability object type>,
      "capability-value": <CDNI capability object>,
      },
      "footprints": [
          {
              "footprint-type": "ipv4v6cidr",
              "footprint-value": ["192.0.2.0/24", "2001:db8::/32"]
          }
      ]
    }
  ]
}
         ]]>
          </artwork>
        </figure>
      </section>
    </section>


    <section anchor="IANA" title="IANA Considerations">

      <section anchor="IANA.payload" title="CDNI Payload Types">

        <t>This document requests the registration of the following CDNI Payload Type 
           under the IANA "CDNI Payload Types" registry defined in <xref target="RFC7736"/>:</t>

        <texttable>
          <ttcol align="left">Payload Type</ttcol>
          <ttcol align="left">Specification</ttcol>

          <c>FCI.RedirectTarget</c>
          <c>RFCthis</c>
          
          <c>MI.FallbackTarget</c>
          <c>RFCthis</c>
          
        </texttable>

        <t>[RFC Editor: Please replace RFCthis with the published RFC
        number for this document.]</t>

        
        
        <section anchor="IANA.payload.RedirectTarget" title="CDNI FCI RedirectTarget Payload Type">
          <t>Purpose: The purpose of this payload type is to
             distinguish RedirectTarget FCI objects</t>
          <t>Interface: FCI</t>
          <t>Encoding: see <xref target="redirect-target-capability-properties"/></t>
        </section>
        <section anchor="IANA.payload.FallbackTarget" title="CDNI MI FallbackTarget Payload Type">
          <t>Purpose: The purpose of this payload type is to
             distinguish FallbackTarget MI objects (and any associated capability advertisement)</t>
          <t>Interface: MI/FCI</t>
          <t>Encoding: see <xref target="fallback-target-metadata-properties"/></t>
        </section>

       </section>

       <section anchor="IANA.cdni.metadata.footprint.types" title="CDNI Metadata Footprint Types">
          <t>As described in section 7.2 of <xref target="RFC8006"/>, the "CDNI Metadata Footprint Types" subregistry
              was created within the "Content Delivery Network Interconnection (CDNI) Parameters" registry. The created
              namespace defines the valid values for Footprint Object Types, and is already populated with the types
              described in Section 4.2.2.2 of <xref target="RFC8006"/>.
          </t>
          <t>The following table defines a request for the registration of an additional footprint type
              as defined in <xref target="cdni-metadata-ipv4v6cidr-footprint-type"/>:
          </t>

           <texttable>
               <ttcol align="left">Footprint Type</ttcol>
               <ttcol align="left">Description</ttcol>
               <ttcol align="left">Specification</ttcol>

               <c>ipv4v6cidr</c>
               <c>IPv4/IPv6 address block</c>
               <c>RFCthis</c>

           </texttable>

           <t>[RFC Editor: Please replace RFCthis with the published RFC
               number for this document.]</t>
       </section>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>This specification is in accordance with the CDNI Metadata Interface and the CDNI Request Routing: 
         Footprint and Capabilities Semantics. As such, it is subject to the security and privacy considerations as
         defined in Section 8 of <xref target="RFC8006"/> and in Section 7 of <xref target="RFC8008"/> respectively. 
      </t> 
        <section anchor="Privacy" title="Confidentiality and Privacy">
          <t>The Redirect Target FCI object potentially reveals information about the internal structure of the dCDN network. 
             A third party could intercept the FCI transactions and use the information to attack the dCDN. The same is also 
             true for the Fallback Target Metadata object as it may reveal information about the internal structure of the 
             uCDN, exposing it to external exploits. Implementations of the FCI and MI MUST therefore use strong authentication 
             and encryption and strictly follow the directions for securing the interface as defined for the Metadata Interface 
             in Section 8.3 of <xref target="RFC8006"/>.
          </t> 
        </section>
    </section>


    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>The authors thank Nir B.&nbsp;Sopher for reality checks against production use cases, his contribution is significant to this document. 
         The authors also thank Ben Niven-Jenkins for his review and feedback and Kevin J.&nbsp;Ma for his guidance throughout the development 
         of this document including his regular reviews.</t>
    </section>
    
  </middle>

  <back>
    <references title="Normative References">

      <?rfc include="reference.RFC.1034" ?>
      
      <?rfc include="reference.RFC.2119" ?>
                       
      <?rfc include="reference.RFC.3986" ?>

      <?rfc include="reference.RFC.6707" ?>

      <?rfc include="reference.RFC.7231" ?>
                  
      <?rfc include="reference.RFC.7336" ?>

      <?rfc include="reference.RFC.7975" ?>  
                       
      <?rfc include="reference.RFC.8006" ?>

      <?rfc include="reference.RFC.8007" ?>

      <?rfc include="reference.RFC.8008" ?>

      <?rfc include="reference.RFC.8174" ?>
          
    </references>

    <references title="Informative References">
      
      <?rfc include="reference.RFC.7736" ?>

      <?rfc include="reference.RFC.7871" ?>

      <reference anchor="SVA" target="https://www.streamingvideoalliance.org">
        <front>
          <title>Streaming Video Alliance Home Page</title>
          <author/>
          <date/>
        </front>
      </reference>

       <reference anchor="OCWG" target="https://www.streamingvideoalliance.org/technical-groups/open-caching/">
        <front>
          <title>Open Caching Home Page</title>
          <author/>
          <date/>
        </front>
      </reference>

      <reference anchor="OC-RR" target="https://www.streamingvideoalliance.org/books/open-cache-request-routing-functional-specification/">
        <front>
          <title>
              Open Caching - Request Routing Functional Specification
          </title>
          <author initials="O." surname="Finkelman" fullname="Ori Finkelman" role="editor">
             <organization>Qwilt</organization>
          </author>
          <author initials="J." surname="Hofmann" fullname="Jason Hofmann">
             <organization>Limelight Networks</organization>
          </author>
          <author initials="E." surname="Klein" fullname="Eric Klein">
             <organization>Disney Streaming Services</organization>
          </author>
          <author initials="S." surname="Mishra" fullname="Sanjay Mishra">
             <organization>Verizon</organization>
          </author>
          <author initials="K." surname="Ma" fullname="Kevin J. Ma">
             <organization>Disney Streaming Services</organization>
          </author>
          <author initials="D." surname="Sahar" fullname="Dan Sahar">
             <organization>Qwilt</organization>
          </author>
          <author initials="B." surname="Zurat" fullname="Bill Zurat">
             <organization>Disney Streaming Services</organization>
          </author>

          <date day="4" month="October" year="2019"/>
        </front>
        <seriesInfo name="Version" value="1.1"/>
      </reference>

                                              

    </references>
  </back>
</rfc>
